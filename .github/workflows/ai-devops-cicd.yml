# AI-generated CI/CD Pipeline for python on AWS - Review Carefully!
name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - master

jobs:
  setup:
    name: Setup Python Environment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Cache Python Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Run Tests
        run: |
          pytest || true

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Package Application
        run: |
          mkdir -p build
          cp -r * build/
          zip -r build/deployment-package.zip build/

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: deployment-package
          path: build/deployment-package.zip

  deploy:
    name: Deploy to AWS EC2
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v3
        with:
          name: deployment-package

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Set up SSH
        run: |
          echo "${{ secrets.DEPLOY_SSH_PRIVATE_KEY }}" > deploy_key.pem
          chmod 600 deploy_key.pem

      - name: Transfer Artifact to EC2
        env:
          SSH_KEY_PATH: deploy_key.pem
        run: |
          scp -o StrictHostKeyChecking=no -i $SSH_KEY_PATH build/deployment-package.zip ubuntu@18.212.68.157:/home/ubuntu/

      - name: Deploy on EC2
        env:
          SSH_KEY_PATH: deploy_key.pem
        run: |
          ssh -o StrictHostKeyChecking=no -i $SSH_KEY_PATH ubuntu@18.212.68.157 << 'EOF'
            unzip -o deployment-package.zip -d ~/app
            cd ~/app
            pip install -r requirements.txt
            # Add commands to restart your application service
            # Example: sudo systemctl restart myapp
          EOF