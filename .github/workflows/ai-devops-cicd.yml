name: CI/CD Pipeline
on:
  push:
    branches:
      - changes  # Your main branch
  pull_request:
    branches:
      - changes  # Pull requests targeting your main branch

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "No requirements.txt found"
          fi
          pip install pytest pytest-cov
      
      - name: Run linting
        run: |
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        continue-on-error: true
      
      - name: Check for tests directory
        id: check_tests
        run: |
          if [ -d "tests" ] || [ -d "test" ]; then
            echo "tests_exist=true" >> $GITHUB_OUTPUT
          else
            echo "tests_exist=false" >> $GITHUB_OUTPUT
            echo "No tests directory found. Skipping tests."
          fi
      
      - name: Run tests with coverage
        if: steps.check_tests.outputs.tests_exist == 'true'
        run: |
          pytest --cov=./ --cov-report=xml
        continue-on-error: true
      
      - name: Create placeholder test report if no tests
        if: steps.check_tests.outputs.tests_exist == 'false'
        run: |
          mkdir -p test-results
          echo "<testsuites><testsuite name='placeholder'><testcase name='placeholder'/></testsuite></testsuites>" > test-results/placeholder.xml
          echo "No tests were found. This is a placeholder report." > coverage.xml
      
      - name: Archive application
        run: |
          zip -r app.zip . -x "*.git*" "*.github*" "*.pytest_cache*" "__pycache__*"
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-package
          path: app.zip
          retention-days: 5

  deploy:
    needs: build-and-test
    if: github.ref == 'refs/heads/changes' && github.event_name == 'push'  # Deploy on push to changes branch
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: app-package
      
      - name: Debug secrets
        run: |
          echo "Checking if EC2_HOST secret is available..."
          if [ -n "${{ secrets.EC2_HOST }}" ]; then
            echo "EC2_HOST secret is defined"
          else
            echo "EC2_HOST secret is NOT defined"
          fi
          
          echo "Checking if DEPLOY_SSH_PRIVATE_KEY secret is available..."
          if [ -n "${{ secrets.DEPLOY_SSH_PRIVATE_KEY }}" ]; then
            echo "DEPLOY_SSH_PRIVATE_KEY secret is defined"
          else
            echo "DEPLOY_SSH_PRIVATE_KEY secret is NOT defined"
          fi
      
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_PRIVATE_KEY }}
      
      - name: Deploy to EC2
        if: ${{ secrets.EC2_HOST != '' }}
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ubuntu
        run: |
          # Debug information
          echo "Setting up deployment to host (partially redacted): ${EC2_HOST:0:5}..."
          
          # Add EC2 host to known hosts to avoid prompt
          mkdir -p ~/.ssh
          
          # Use explicit host instead of environment variable
          if [ -n "$EC2_HOST" ]; then
            ssh-keyscan -H "$EC2_HOST" >> ~/.ssh/known_hosts
            
            # Transfer the application package
            scp app.zip $EC2_USERNAME@$EC2_HOST:~/
            
            # Execute deployment commands on remote server
            ssh $EC2_USERNAME@$EC2_HOST << 'EOF'
              cd ~
              unzip -o app.zip
              if [ -f deploy.sh ]; then
                chmod +x deploy.sh
                ./deploy.sh
              else
                echo "No deploy.sh found, using default deployment"
                # Install dependencies
                python -m pip install -r requirements.txt
              fi
              # Clean up
              rm app.zip
EOF
          else
            echo "EC2_HOST is not set correctly. Deployment cannot proceed."
            exit 1
          fi
      
      - name: Deployment failed - missing secrets
        if: ${{ secrets.EC2_HOST == '' }}
        run: |
          echo "Deployment cannot proceed because EC2_HOST secret is not configured."
          echo "Please add the EC2_HOST secret in your repository settings."
          echo "Settings > Secrets and variables > Actions > New repository secret"
