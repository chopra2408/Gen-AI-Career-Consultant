name: AI DevOps CI/CD Pipeline
'on':
  push:
    branches:
    - main
    - master
  pull_request:
    branches:
    - main
    - master
  workflow_dispatch: {}
jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      artifact_path: ${{ steps.upload_artifact.outputs.artifact-path }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: "\n                        python -m venv venv\n                      \
        \  source venv/bin/activate\n                        pip install --upgrade\
        \ pip\n                        if [ -f requirements.txt ]; then pip install\
        \ -r requirements.txt; fi\n                        if [ -f setup.py ]; then\
        \ pip install .; fi\n                    "
    - name: Run linters (e.g., flake8, black - optional)
      run: "\n                        source venv/bin/activate\n                 \
        \       # pip install flake8 black # Install if needed\n                 \
        \       # flake8 .\n                        # black --check .\n          \
        \              echo \"Linting step placeholder\"\n                    "
    - name: Run tests (e.g., pytest)
      run: "\n                        source venv/bin/activate\n                 \
        \       # pip install pytest # Install if needed\n                       \
        \ pytest || echo \"Pytest not found or no tests run.\"\n                 \
        \   "
    - name: Archive production artifacts
      run: zip -r app-build.zip . -x ".git*" -x ".github*" -x "__pycache__*" -x "*.pyc"
  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    environment:
      name: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: app-build
    - name: Unzip artifact
      run: unzip app-build.zip
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    - name: Setup SSH Key
      run: "\n                         echo \"${ secrets.EC2_SSH_PRIVATE_KEY }\" >\
        \ private_key.pem\n                         chmod 600 private_key.pem\n  \
        \                  "
    - name: Deploy to EC2 via SCP & SSH
      run: "\n                         echo \"Deploying application files via SCP...\"\
        \n                         # Use -o StrictHostKeyChecking=no for first connection\
        \ (use with caution)\n                         scp -o StrictHostKeyChecking=no\
        \ -i private_key.pem -r ./* ${ env.SSH_USER }@${ env.PUBLIC_IP }:/path/to/app/destination\n\
        \                         echo \"Executing remote commands via SSH...\"\n\
        \                         ssh -o StrictHostKeyChecking=no -i private_key.pem\
        \ ${ env.SSH_USER }@${ env.PUBLIC_IP } << EOF\n                          \
        \    echo \"Running deployment script on server...\"\n                   \
        \           cd /path/to/app/destination\n                              # Commands\
        \ to restart your application, e.g.:\n                              # npm\
        \ install --production # If node_modules weren't zipped\n                \
        \              # pm2 restart myapp || pm2 start ecosystem.config.js\n    \
        \                          # sudo systemctl restart myapp.service\n      \
        \                        echo \"Deployment commands finished.\"\n        \
        \                 EOF\n                    "
      env:
        PUBLIC_IP: 54.146.139.132
        SSH_USER: ec2-user
