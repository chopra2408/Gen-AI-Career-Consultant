# AI-generated CI/CD Pipeline for python on AWS - Review Carefully!
name: CI/CD Pipeline

on:
  push:
    branches:
      - main # Changed from 'changes' - assuming 'main' is the primary branch for build/deploy
      - master

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Updated to v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x' # Consider specifying a more precise version like '3.9', '3.10', etc.

      - name: Cache pip
        uses: actions/cache@v3 # v3 is current for cache
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

  test:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Updated to v4

      # Restore cache if dependencies are needed for tests (often they are)
      - name: Cache pip # Add cache step here too if tests need installed deps
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies # Install again if needed for test runner itself or test deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # Install test-specific dependencies if any (e.g., pip install pytest)

      - name: Run tests
        run: |
          pip install pytest # Example: Ensure pytest is installed
          pytest || true # Run tests, allow failure if no tests found or they fail

  build:
    runs-on: ubuntu-latest
    needs: test # Depends on test passing (remove '|| true' from pytest step if tests MUST pass)
    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Updated to v4

      # Re-install dependencies needed for packaging if not included in checkout
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install dependencies specifically needed for the *runtime* package
          # This command might need adjustment depending on what should be in the zip
          pip install --target ./app_package -r requirements.txt
          # Or just zip the whole repo if the server does pip install

      - name: Create deployment package
        run: |
          # Option 1: Zip the whole repository (excluding .git, tests, etc.)
          # Assumes server will run 'pip install -r requirements.txt'
          zip -r deployment-package.zip . -x '*.git*' -x 'tests/*' -x 'private_key.pem' -x '__pycache__/*' -x '*.pyc'

          # Option 2: Zip only the application code and installed dependencies
          # (Requires installing deps to a target dir like './app_package' above)
          # cd app_package
          # zip -r ../deployment-package.zip .
          # cd ..
          # zip -ur deployment-package.zip your_app_module/ other_files.py -x '__pycache__/*' -x '*.pyc'

      - name: Upload artifact
        uses: actions/upload-artifact@v4 # Updated to v4
        with:
          name: deployment-package
          path: deployment-package.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    # Deploy only on push to main or master branch
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: production # Optional: Define a deployment environment in GitHub settings

    steps:
      # No checkout needed here usually, we're downloading the artifact

      - name: Download artifact
        uses: actions/download-artifact@v4 # Keep v4, matches upload
        with:
          name: deployment-package
          # No path needed, defaults to workspace root which is fine

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2 # v2 is okay, but check for newer stable versions like v4 if issues arise
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 # Make sure this matches your EC2 instance region

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh # Ensure .ssh directory exists
          echo "${{ secrets.DEPLOY_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa_deploy
          chmod 600 ~/.ssh/id_rsa_deploy

      - name: Add EC2 host key to known_hosts (optional but improves security slightly)
        run: |
          # Add a sleep to allow network propagation if needed
          sleep 5
          ssh-keyscan -H 54.210.137.176 >> ~/.ssh/known_hosts

      - name: Transfer package to EC2
        run: |
          scp -i ~/.ssh/id_rsa_deploy deployment-package.zip ec2-user@54.210.137.176:/home/ec2-user/

      - name: Deploy on EC2
        run: |
          ssh -i ~/.ssh/id_rsa_deploy ec2-user@54.210.137.176 << 'EOF'
          # Stop previous service? (Example: systemctl stop myapp || true)
          # Clean existing app directory? (Example: rm -rf /home/ec2-user/app/*)
          echo "Unzipping package..."
          unzip -o /home/ec2-user/deployment-package.zip -d /home/ec2-user/app
          echo "Changing directory..."
          cd /home/ec2-user/app
          echo "Installing dependencies..."
          # Ensure python/pip are available on the server (adjust path if needed)
          # Consider using a virtual environment on the server
          # python3 -m venv venv
          # source venv/bin/activate
          pip install -r requirements.txt
          echo "Installation complete. Restarting application (add specific command below)..."
          # --- CRITICAL: Add commands to restart your specific application service here ---
          # Example 1: Systemd service
          # sudo systemctl restart myapp.service
          # Example 2: PM2 (Node.js, but illustrates concept)
          # pm2 reload app_name_or_id
          # Example 3: Simple Python script background run (not robust)
          # pkill -f your_script.py || true
          # nohup python your_script.py &
          # Example 4: Flask/Gunicorn/Uvicorn (might need sudo for port 80)
          # sudo systemctl restart gunicorn_myapp
          # ------------------------------------------------------------------------------
          echo "Deployment script finished."
          EOF
        # NOTE: Ensure DEPLOY_SSH_PRIVATE_KEY secret matches the key authorized on the EC2 instance.
