# AI-generated CI/CD Pipeline for python on AWS - Review Carefully!
name: CI/CD Pipeline

on:
  push:
    branches:
      - changes
      - master

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

  build:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Package application
        run: |
          mkdir -p artifact
          zip -r artifact/app.zip . -x '*.git*' -x 'artifact/*'

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: app-package
          path: artifact/app.zip

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          pytest || true

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: app-package
          path: artifact

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Set up SSH key
        run: |
          echo "${{ secrets.DEPLOY_SSH_PRIVATE_KEY }}" > ./ai-devops-ec2-key.pem
          chmod 600 ./ai-devops-ec2-key.pem

      - name: Transfer artifact to EC2
        env:
          SSH_KEY_PATH: ./ai-devops-ec2-key.pem
          SSH_USER: ubuntu
          EC2_PUBLIC_IP: 54.152.117.53
        run: |
          scp -o StrictHostKeyChecking=no -i $SSH_KEY_PATH artifact/app.zip $SSH_USER@$EC2_PUBLIC_IP:/home/ubuntu/

      - name: Deploy on EC2
        env:
          SSH_KEY_PATH: ./ai-devops-ec2-key.pem
          SSH_USER: ubuntu
          EC2_PUBLIC_IP: 54.152.117.53
        run: |
          ssh -o StrictHostKeyChecking=no -i $SSH_KEY_PATH $SSH_USER@$EC2_PUBLIC_IP << 'EOF'
            unzip -o /home/ubuntu/app.zip -d /home/ubuntu/app
            cd /home/ubuntu/app
            pip install -r requirements.txt
            # Add commands to restart your application here, e.g., systemctl restart myapp
          EOF
