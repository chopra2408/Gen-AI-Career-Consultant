name: CI/CD Pipeline
on:
  push:
    branches:
      - changes
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "No requirements.txt found"
          fi
          pip install pytest pytest-cov
      
      - name: Run linting
        run: |
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        continue-on-error: true
      
      - name: Check for tests directory
        id: check_tests
        run: |
          if [ -d "tests" ] || [ -d "test" ]; then
            echo "tests_exist=true" >> $GITHUB_OUTPUT
          else
            echo "tests_exist=false" >> $GITHUB_OUTPUT
            echo "No tests directory found. Skipping tests."
          fi
      
      - name: Run tests with coverage
        if: steps.check_tests.outputs.tests_exist == 'true'
        run: |
          pytest --cov=./ --cov-report=xml
        continue-on-error: true
      
      - name: Create placeholder test report if no tests
        if: steps.check_tests.outputs.tests_exist == 'false'
        run: |
          mkdir -p test-results
          echo "<testsuites><testsuite name='placeholder'><testcase name='placeholder'/></testsuite></testsuites>" > test-results/placeholder.xml
          echo "No tests were found. This is a placeholder report." > coverage.xml
      
      - name: Archive application
        run: |
          zip -r app.zip . -x "*.git*" "*.github*" "*.pytest_cache*" "__pycache__*"
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-package
          path: app.zip
          retention-days: 5

  deploy:
    needs: build-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: app-package
      
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_PRIVATE_KEY }}
      
      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ubuntu
        run: |
          # Add EC2 host to known hosts to avoid prompt
          mkdir -p ~/.ssh
          ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts
          
          # Transfer the application package
          scp app.zip $EC2_USERNAME@$EC2_HOST:~/
          
          # Execute deployment commands on remote server
          ssh $EC2_USERNAME@$EC2_HOST << 'EOF'
            cd ~
            unzip -o app.zip
            if [ -f deploy.sh ]; then
              chmod +x deploy.sh
              ./deploy.sh
            else
              echo "No deploy.sh found, using default deployment"
              # Add default deployment commands here if needed
              python -m pip install -r requirements.txt
              # If you're using a framework like Flask or Django, add appropriate restart commands
            fi
            # Clean up
            rm app.zip
          EOF
